In work
	Practice recursion on a few problems look into dynamic programming
		https://www.youtube.com/watch?v=oBt53YbR9Kk&t=760s
         bestSum memoization
         canConstruct memoization
         countConstruct memoization 
         allConstruct memoization
         fib tabulation
         gridTraveler tabulation
         tabulation recipe
         canSum tabulation
         howSum tabulation
         bestSum tabulation
         canConstruct tabulation
         countConstruct tabulation
         allConstruct tabulation
	
Planned firing order
	Stability in Sorting
	Mergesort
	Quicksort
	Write the merge sort algorithm
	Write the quicksort algorithm
	SortColors (sort problem).
	Find first and last position in sorted array (do again with log n runtime)
	Dynamic Array
	Implement an ArrayList from scratch	


Source - https://www.alimirio.com/posts/read-this-before-you-start-solving-problems-on-leetcode-prep-work
Data Structures
	Linked List
	Stack & Queue
	Hash Tables
	Binary Search Tree
	Binary Heaps & Priority Queue
	Graphs
	Trie
	
Algorithms
	Heapsort — Sort it in-place to get O(1) space
	Binary Search
	Selections — Kth Smallest Elements (Sort, QuickSelect, Mediums of Mediums) — Implement all three ways
	Permutations
	Subsets
	BFS Graph
	DFS Graph
	Dijkstra’s Algorithm (just learn the idea — no need to implement)
	Tree Traversals — BFS, DFS (in-order, pre-order, post-order): Implement Recursive and Iterative
	External Sort — No implementation; Just know the concept.
	NP-Complete (Video) — Just know the concept
	Topological Sort
	Detect cycle in an undirected graph
	Detect a cycle in a directed graph
	Count connected components in a graph
	Find strongly connected components in a graph
	Prep work
	Once you are comfortable with the data structures & algorithms above, do the following exercise multiple times (at least 2–3 times) until you can do them with your eyes closed.

To do tasks
	Reverse a linked list
	Implement a Stack & a Queue using Array
	Implement a HashTable with simple Hashing functions
	Implement a Graph using Adjacency List, and then write functions for BFS & DFS.\
	Write the binary search algorithm both recursively and iteratively
	Print binary tree using DFS (in-order, preorder and post order — all three of them) and BFS.
	Memorize time & space complexities for common algorithms. Here’s an interesting website.
	Implement a trie.
	Learn these important bit manipulation tricks.
	
	
Completed tasks
	Arrays
	Strings
	Bit Manipulation & Numbers — difference btw Unsigned vs signed numbers

Maybe stuff you want to get back to
	Search for Rotated Sorted Array (not clear what is expected)
	Jump Game (recursion problem).
	Unique Paths (tree problem).
	Subsets (tree problem + sort problem)
	WordSearch (tree problem).
	LetterToPhone (tree problem).
	CountAndSay (recursion problem).
	GenerateParentheses (tree problem).