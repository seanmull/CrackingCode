Understand if you can used API or not

Develop a plan how to handle each item
Current plan
	Do some easy (common) problems to practice other concepts such as big 0
		Max subarray
		Plus one
		Merge sorted array
		Majority element
		Missing number
		Move Zeros
	Try some medium problems just to get an idea where my limits are

In work
	Arrays

Source - https://www.alimirio.com/posts/read-this-before-you-start-solving-problems-on-leetcode-prep-work
Data Structures
	Strings
	Dynamic Array
	Linked List
	Stack & Queue
	Hash Tables
	Binary Search Tree
	Binary Heaps & Priority Queue
	Graphs
	Trie
	
Algorithms
	Bit Manipulation & Numbers — difference btw Unsigned vs signed numbers
	Stability in Sorting
	Mergesort
	Quicksort
	Heapsort — Sort it in-place to get O(1) space
	Binary Search
	Selections — Kth Smallest Elements (Sort, QuickSelect, Mediums of Mediums) — Implement all three ways
	Permutations
	Subsets
	BFS Graph
	DFS Graph
	Dijkstra’s Algorithm (just learn the idea — no need to implement)
	Tree Traversals — BFS, DFS (in-order, pre-order, post-order): Implement Recursive and Iterative
	External Sort — No implementation; Just know the concept.
	NP-Complete (Video) — Just know the concept
	Topological Sort
	Detect cycle in an undirected graph
	Detect a cycle in a directed graph
	Count connected components in a graph
	Find strongly connected components in a graph
	Prep work
	Once you are comfortable with the data structures & algorithms above, do the following exercise multiple times (at least 2–3 times) until you can do them with your eyes closed.

To do tasks
	Implement an ArrayList from scratch
	Reverse a linked list
	Implement a Stack & a Queue using Array
	Implement a HashTable with simple Hashing functions
	Implement a Graph using Adjacency List, and then write functions for BFS & DFS.
	Write the binary search algorithm both recursively and iteratively
	Write the merge sort algorithm
	Write the quicksort algorithm
	Print binary tree using DFS (in-order, preorder and post order — all three of them) and BFS.
	Memorize time & space complexities for common algorithms. Here’s an interesting website.
	Implement a trie.
	Learn these important bit manipulation tricks.
	
	
Completed tasks